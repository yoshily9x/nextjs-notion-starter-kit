{"version":3,"file":"request-router.js","sourceRoot":"","sources":["../../../src/utils/request-router.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { document } from '../utils/globals'\nimport { logger } from './logger'\n\n/**\n * The request router helps simplify the logic to determine which endpoints should be called for which things\n * The basic idea is that for a given region (US or EU), we have a set of endpoints that we should call depending\n * on the type of request (events, replays, decide, etc.) and handle overrides that may come from configs or the decide endpoint\n */\n\nexport enum RequestRouterRegion {\n    US = 'us',\n    EU = 'eu',\n    CUSTOM = 'custom',\n}\n\nexport type RequestRouterTarget = 'api' | 'ui' | 'assets'\n\nconst ingestionDomain = 'i.posthog.com'\n\nexport class RequestRouter {\n    instance: PostHog\n    private _regionCache: Record<string, RequestRouterRegion> = {}\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    get apiHost(): string {\n        return this.instance.config.api_host.trim().replace(/\\/$/, '')\n    }\n    get uiHost(): string | undefined {\n        const host = this.instance.config.ui_host?.replace(/\\/$/, '')\n\n        if (host === 'https://app.posthog.com') {\n            return 'https://us.posthog.com'\n        }\n        return host\n    }\n\n    get region(): RequestRouterRegion {\n        // We don't need to compute this every time so we cache the result\n        if (!this._regionCache[this.apiHost]) {\n            if (/https:\\/\\/(app|us|us-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost)) {\n                this._regionCache[this.apiHost] = RequestRouterRegion.US\n            } else if (/https:\\/\\/(eu|eu-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost)) {\n                this._regionCache[this.apiHost] = RequestRouterRegion.EU\n            } else {\n                this._regionCache[this.apiHost] = RequestRouterRegion.CUSTOM\n            }\n        }\n        return this._regionCache[this.apiHost]\n    }\n\n    endpointFor(target: RequestRouterTarget, path: string = ''): string {\n        if (path) {\n            path = path[0] === '/' ? path : `/${path}`\n        }\n\n        if (target === 'ui') {\n            return (this.uiHost || this.apiHost.replace(`.${ingestionDomain}`, '.posthog.com')) + path\n        }\n\n        if (this.region === RequestRouterRegion.CUSTOM) {\n            return this.apiHost + path\n        }\n\n        const suffix = ingestionDomain + path\n\n        switch (target) {\n            case 'assets':\n                return `https://${this.region}-assets.${suffix}`\n            case 'api':\n                return `https://${this.region}.${suffix}`\n        }\n    }\n\n    loadScript(scriptUrlToLoad: string, callback: (error?: string | Event, event?: Event) => void): void {\n        if (this.instance.config.disable_external_dependency_loading) {\n            logger.warn(`${scriptUrlToLoad} was requested but loading of external scripts is disabled.`)\n            return callback('Loading of external scripts is disabled')\n        }\n\n        const url = scriptUrlToLoad[0] === '/' ? this.endpointFor('assets', scriptUrlToLoad) : scriptUrlToLoad\n\n        const addScript = () => {\n            if (!document) {\n                return callback('document not found')\n            }\n            const scriptTag = document.createElement('script')\n            scriptTag.type = 'text/javascript'\n            scriptTag.src = url\n            scriptTag.onload = (event) => callback(undefined, event)\n            scriptTag.onerror = (error) => callback(error)\n\n            const scripts = document.querySelectorAll('body > script')\n            if (scripts.length > 0) {\n                scripts[0].parentNode?.insertBefore(scriptTag, scripts[0])\n            } else {\n                // In exceptional situations this call might load before the DOM is fully ready.\n                document.body.appendChild(scriptTag)\n            }\n        }\n\n        if (document?.body) {\n            addScript()\n        } else {\n            document?.addEventListener('DOMContentLoaded', addScript)\n        }\n    }\n}\n"]}