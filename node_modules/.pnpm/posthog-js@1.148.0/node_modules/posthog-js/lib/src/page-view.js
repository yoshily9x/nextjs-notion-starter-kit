import { window } from './utils/globals';
import { isUndefined } from './utils/type-utils';
var PageViewManager = /** @class */ (function () {
    function PageViewManager(instance) {
        this._instance = instance;
    }
    PageViewManager.prototype.doPageView = function () {
        var _a;
        var response = this._previousScrollProperties();
        // On a pageview we reset the contexts
        this._currentPath = (_a = window === null || window === void 0 ? void 0 : window.location.pathname) !== null && _a !== void 0 ? _a : '';
        this._instance.scrollManager.resetContext();
        return response;
    };
    PageViewManager.prototype.doPageLeave = function () {
        return this._previousScrollProperties();
    };
    PageViewManager.prototype._previousScrollProperties = function () {
        var previousPath = this._currentPath;
        var scrollContext = this._instance.scrollManager.getContext();
        if (!previousPath || !scrollContext) {
            return {};
        }
        var maxScrollHeight = scrollContext.maxScrollHeight, lastScrollY = scrollContext.lastScrollY, maxScrollY = scrollContext.maxScrollY, maxContentHeight = scrollContext.maxContentHeight, lastContentY = scrollContext.lastContentY, maxContentY = scrollContext.maxContentY;
        if (isUndefined(maxScrollHeight) ||
            isUndefined(lastScrollY) ||
            isUndefined(maxScrollY) ||
            isUndefined(maxContentHeight) ||
            isUndefined(lastContentY) ||
            isUndefined(maxContentY)) {
            return {};
        }
        // Use ceil, so that e.g. scrolling 999.5px of a 1000px page is considered 100% scrolled
        maxScrollHeight = Math.ceil(maxScrollHeight);
        lastScrollY = Math.ceil(lastScrollY);
        maxScrollY = Math.ceil(maxScrollY);
        maxContentHeight = Math.ceil(maxContentHeight);
        lastContentY = Math.ceil(lastContentY);
        maxContentY = Math.ceil(maxContentY);
        // if the maximum scroll height is near 0, then the percentage is 1
        var lastScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(lastScrollY / maxScrollHeight, 0, 1);
        var maxScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(maxScrollY / maxScrollHeight, 0, 1);
        var lastContentPercentage = maxContentHeight <= 1 ? 1 : clamp(lastContentY / maxContentHeight, 0, 1);
        var maxContentPercentage = maxContentHeight <= 1 ? 1 : clamp(maxContentY / maxContentHeight, 0, 1);
        return {
            $prev_pageview_pathname: previousPath,
            $prev_pageview_last_scroll: lastScrollY,
            $prev_pageview_last_scroll_percentage: lastScrollPercentage,
            $prev_pageview_max_scroll: maxScrollY,
            $prev_pageview_max_scroll_percentage: maxScrollPercentage,
            $prev_pageview_last_content: lastContentY,
            $prev_pageview_last_content_percentage: lastContentPercentage,
            $prev_pageview_max_content: maxContentY,
            $prev_pageview_max_content_percentage: maxContentPercentage,
        };
    };
    return PageViewManager;
}());
export { PageViewManager };
function clamp(x, min, max) {
    return Math.max(min, Math.min(x, max));
}
//# sourceMappingURL=page-view.js.map