{"version":3,"file":"segment-integration.js","sourceRoot":"","sources":["../../../src/extensions/segment-integration.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Extend Segment with extra PostHog JS functionality. Required for things like Recordings and feature flags to work correctly.\n *\n * ### Usage\n *\n *  ```js\n *  // After your standard segment anyalytics install\n *  analytics.load(\"GOEDfA21zZTtR7clsBuDvmBKAtAdZ6Np\");\n *\n *  analytics.ready(() => {\n *    posthog.init('<posthog-api-key>', {\n *      capture_pageview: false,\n *      segment: window.analytics, // NOTE: Be sure to use window.analytics here!\n *    });\n *    window.analytics.page();\n *  })\n *  ```\n */\nimport { PostHog } from '../posthog-core'\nimport { logger } from '../utils/logger'\n\nimport { uuidv7 } from '../uuidv7'\nimport { isFunction } from '../utils/type-utils'\nimport { USER_STATE } from '../constants'\n\nexport type SegmentUser = {\n    anonymousId(): string | undefined\n    id(): string | undefined\n}\n\nexport type SegmentAnalytics = {\n    user: () => SegmentUser | Promise<SegmentUser>\n    register: (integration: SegmentPlugin) => Promise<void>\n}\n\n// Loosely based on https://github.com/segmentio/analytics-next/blob/master/packages/core/src/plugins/index.ts\ninterface SegmentContext {\n    event: {\n        event: string\n        userId?: string\n        anonymousId?: string\n        properties: any\n    }\n}\n\ntype SegmentFunction = (ctx: SegmentContext) => Promise<SegmentContext> | SegmentContext\n\ninterface SegmentPlugin {\n    name: string\n    version: string\n    type: 'enrichment'\n    isLoaded: () => boolean\n    load: (ctx: SegmentContext, instance: any, config?: any) => Promise<unknown>\n    unload?: (ctx: SegmentContext, instance: any) => Promise<unknown> | unknown\n    ready?: () => Promise<unknown>\n    track?: SegmentFunction\n    identify?: SegmentFunction\n    page?: SegmentFunction\n    group?: SegmentFunction\n    alias?: SegmentFunction\n    screen?: SegmentFunction\n}\n\nconst createSegmentIntegration = (posthog: PostHog): SegmentPlugin => {\n    if (!Promise || !Promise.resolve) {\n        logger.warn('This browser does not have Promise support, and can not use the segment integration')\n    }\n\n    const enrichEvent = (ctx: SegmentContext, eventName: string | undefined) => {\n        if (!eventName) {\n            return ctx\n        }\n        if (!ctx.event.userId && ctx.event.anonymousId !== posthog.get_distinct_id()) {\n            // This is our only way of detecting that segment's analytics.reset() has been called so we also call it\n            posthog.reset()\n        }\n        if (ctx.event.userId && ctx.event.userId !== posthog.get_distinct_id()) {\n            posthog.register({\n                distinct_id: ctx.event.userId,\n            })\n            posthog.reloadFeatureFlags()\n        }\n\n        const additionalProperties = posthog._calculate_event_properties(eventName, ctx.event.properties ?? {})\n        ctx.event.properties = Object.assign({}, additionalProperties, ctx.event.properties)\n        return ctx\n    }\n\n    return {\n        name: 'PostHog JS',\n        type: 'enrichment',\n        version: '1.0.0',\n        isLoaded: () => true,\n        // check and early return above\n        // eslint-disable-next-line compat/compat\n        load: () => Promise.resolve(),\n        track: (ctx) => enrichEvent(ctx, ctx.event.event),\n        page: (ctx) => enrichEvent(ctx, '$pageview'),\n        identify: (ctx) => enrichEvent(ctx, '$identify'),\n        screen: (ctx) => enrichEvent(ctx, '$screen'),\n    }\n}\n\nfunction setupPostHogFromSegment(posthog: PostHog, done: () => void) {\n    const segment = posthog.config.segment\n    if (!segment) {\n        return done()\n    }\n\n    const bootstrapUser = (user: SegmentUser) => {\n        // Use segments anonymousId instead\n        const getSegmentAnonymousId = () => user.anonymousId() || uuidv7()\n        posthog.config.get_device_id = getSegmentAnonymousId\n\n        // If a segment user ID exists, set it as the distinct_id\n        if (user.id()) {\n            posthog.register({\n                distinct_id: user.id(),\n                $device_id: getSegmentAnonymousId(),\n            })\n            posthog.persistence!.set_property(USER_STATE, 'identified')\n        }\n\n        done()\n    }\n\n    const segmentUser = segment.user()\n\n    // If segmentUser is a promise then we need to wait for it to resolve\n    if ('then' in segmentUser && isFunction(segmentUser.then)) {\n        segmentUser.then((user) => bootstrapUser(user))\n    } else {\n        bootstrapUser(segmentUser as SegmentUser)\n    }\n}\n\nexport function setupSegmentIntegration(posthog: PostHog, done: () => void) {\n    const segment = posthog.config.segment\n    if (!segment) {\n        return done()\n    }\n\n    setupPostHogFromSegment(posthog, () => {\n        segment.register(createSegmentIntegration(posthog)).then(() => {\n            done()\n        })\n    })\n}\n"]}