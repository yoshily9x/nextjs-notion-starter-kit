{"version":3,"file":"tracing-headers.js","sourceRoot":"","sources":["../../../src/extensions/tracing-headers.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAA;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,MAAM,MAAM,WAAW,CAAA;AAC9B,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AAEjD,IAAM,aAAa,GAAG,mBAAmB,CAAA;AAEzC;IAII,wBAA6B,QAAiB;QAA9C,iBAAkD;QAArB,aAAQ,GAAR,QAAQ,CAAS;QAHtC,qBAAgB,GAA6B,SAAS,CAAA;QACtD,uBAAkB,GAA6B,SAAS,CAAA;QA6BxD,oBAAe,GAAG;YACtB,oFAAoF;YACpF,IAAI,WAAW,CAAC,KAAI,CAAC,gBAAgB,CAAC,EAAE;gBACpC,gBAAgB,CAAC,6BAA6B,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAe,CAAC,CAAA;aAC1F;YACD,IAAI,WAAW,CAAC,KAAI,CAAC,kBAAkB,CAAC,EAAE;gBACtC,gBAAgB,CAAC,6BAA6B,CAAC,WAAW,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAe,CAAC,CAAA;aAC5F;QACL,CAAC,CAAA;IAnCgD,CAAC;IAE1C,oCAAW,GAAnB,UAAoB,EAAc;QAC9B,IAAI,gBAAgB,CAAC,6BAA6B,EAAE;YAChD,iBAAiB;YACjB,EAAE,EAAE,CAAA;SACP;QAED,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,uCAAgC,MAAM,CAAC,WAAW,CAAE,EAAE,UAAC,GAAG;YAC7F,IAAI,GAAG,EAAE;gBACL,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,wBAAwB,EAAE,GAAG,CAAC,CAAA;aAC9D;YACD,EAAE,EAAE,CAAA;QACR,CAAC,CAAC,CAAA;IACN,CAAC;IACM,6CAAoB,GAA3B;;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,qBAAqB,EAAE;YAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;SACzC;aAAM;YACH,MAAA,IAAI,CAAC,gBAAgB,oDAAI,CAAA;YACzB,MAAA,IAAI,CAAC,kBAAkB,oDAAI,CAAA;YAC3B,qDAAqD;YACrD,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAA;YACjC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;SACtC;IACL,CAAC;IAWL,qBAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { assignableWindow } from '../utils/globals'\nimport { logger } from '../utils/logger'\nimport Config from '../config'\nimport { isUndefined } from '../utils/type-utils'\n\nconst LOGGER_PREFIX = '[TRACING-HEADERS]'\n\nexport class TracingHeaders {\n    private _restoreXHRPatch: (() => void) | undefined = undefined\n    private _restoreFetchPatch: (() => void) | undefined = undefined\n\n    constructor(private readonly instance: PostHog) {}\n\n    private _loadScript(cb: () => void): void {\n        if (assignableWindow.postHogTracingHeadersPatchFns) {\n            // already loaded\n            cb()\n        }\n\n        this.instance.requestRouter.loadScript(`/static/tracing-headers.js?v=${Config.LIB_VERSION}`, (err) => {\n            if (err) {\n                logger.error(LOGGER_PREFIX + ' failed to load script', err)\n            }\n            cb()\n        })\n    }\n    public startIfEnabledOrStop() {\n        if (this.instance.config.__add_tracing_headers) {\n            this._loadScript(this._startCapturing)\n        } else {\n            this._restoreXHRPatch?.()\n            this._restoreFetchPatch?.()\n            // we don't want to call these twice so we reset them\n            this._restoreXHRPatch = undefined\n            this._restoreFetchPatch = undefined\n        }\n    }\n\n    private _startCapturing = () => {\n        // NB: we can assert sessionManager is present only because we've checked previously\n        if (isUndefined(this._restoreXHRPatch)) {\n            assignableWindow.postHogTracingHeadersPatchFns._patchXHR(this.instance.sessionManager!)\n        }\n        if (isUndefined(this._restoreFetchPatch)) {\n            assignableWindow.postHogTracingHeadersPatchFns._patchFetch(this.instance.sessionManager!)\n        }\n    }\n}\n"]}