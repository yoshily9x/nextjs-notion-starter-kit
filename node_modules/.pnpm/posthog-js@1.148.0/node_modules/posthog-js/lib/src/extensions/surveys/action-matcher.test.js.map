{"version":3,"file":"action-matcher.test.js","sourceRoot":"","sources":["../../../../src/extensions/surveys/action-matcher.test.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference lib=\"dom\" />\n\nimport { ActionType, ActionStepStringMatching } from '../../posthog-surveys-types'\nimport { PostHogPersistence } from '../../posthog-persistence'\nimport { PostHog } from '../../posthog-core'\nimport { CaptureResult, PostHogConfig } from '../../types'\nimport { ActionMatcher } from './action-matcher'\n\ndescribe('action-matcher', () => {\n    let config: PostHogConfig\n    let instance: PostHog\n\n    beforeEach(() => {\n        config = {\n            token: 'testtoken',\n            api_host: 'https://app.posthog.com',\n            persistence: 'memory',\n        } as unknown as PostHogConfig\n\n        instance = {\n            config: config,\n            persistence: new PostHogPersistence(config),\n            _addCaptureHook: jest.fn(),\n        } as unknown as PostHog\n    })\n\n    afterEach(() => {\n        instance.persistence?.clear()\n    })\n\n    const createCaptureResult = (eventName: string, currentUrl?: string): CaptureResult => {\n        return {\n            $set: undefined,\n            $set_once: undefined,\n            properties: {\n                $current_url: currentUrl,\n            },\n            timestamp: undefined,\n            uuid: '0C984DA5-761F-4F75-9582-D2F95B43B04A',\n            event: eventName,\n        }\n    }\n    const createAction = (\n        id: number,\n        eventName: string,\n        currentUrl?: string,\n        urlMatch?: ActionStepStringMatching\n    ): ActionType => {\n        return {\n            id: id,\n            name: `${eventName || 'user defined '} action`,\n            steps: [\n                {\n                    event: eventName,\n                    text: null,\n                    text_matching: null,\n                    href: null,\n                    href_matching: null,\n                    url: currentUrl,\n                    url_matching: urlMatch || 'exact',\n                },\n            ],\n            created_at: '2024-06-20T14:39:23.616676Z',\n            deleted: false,\n            is_action: true,\n            tags: [],\n        }\n    }\n\n    it('can match action on event name', () => {\n        const pageViewAction = createAction(3, '$mypageview') as unknown as ActionType\n        const actionMatcher = new ActionMatcher(instance)\n        actionMatcher.register([pageViewAction])\n        let pageViewActionMatched = false\n\n        const onAction = (actionName: string) => {\n            if (!pageViewActionMatched) {\n                pageViewActionMatched = actionName === pageViewAction.name\n            }\n        }\n\n        actionMatcher._addActionHook(onAction)\n\n        actionMatcher.on('$match_event_name', createCaptureResult('$mypageview'))\n        expect(pageViewActionMatched).toBeTruthy()\n    })\n\n    it('can match action on current_url exact', () => {\n        const pageViewAction = createAction(2, '$autocapture', 'https://us.posthog.com')\n        const actionMatcher = new ActionMatcher(instance)\n        actionMatcher.register([pageViewAction])\n\n        let pageViewActionMatched = false\n\n        const onAction = (actionName: string) => {\n            if (!pageViewActionMatched) {\n                pageViewActionMatched = actionName === pageViewAction.name\n            }\n        }\n\n        actionMatcher._addActionHook(onAction)\n        actionMatcher.on('$autocapture', createCaptureResult('$autocapture', 'https://eu.posthog.com'))\n        expect(pageViewActionMatched).toBeFalsy()\n\n        actionMatcher.on('$autocapture', createCaptureResult('$autocapture', 'https://us.posthog.com'))\n        expect(pageViewActionMatched).toBeTruthy()\n    })\n\n    it('can match action on current_url regexp', () => {\n        const pageViewAction = createAction(2, '$current_url_regexp', '[a-z][a-z].posthog.*', 'regex')\n        const actionMatcher = new ActionMatcher(instance)\n        actionMatcher.register([pageViewAction])\n\n        let pageViewActionMatched = false\n\n        const onAction = (actionName: string) => {\n            if (!pageViewActionMatched) {\n                pageViewActionMatched = actionName === pageViewAction.name\n            }\n        }\n\n        actionMatcher._addActionHook(onAction)\n        actionMatcher.on('$autocapture', createCaptureResult('$current_url_regexp', 'https://eu.posthog.com'))\n        expect(pageViewActionMatched).toBeTruthy()\n        pageViewActionMatched = false\n\n        actionMatcher.on('$autocapture', createCaptureResult('$current_url_regexp', 'https://us.posthog.com'))\n        expect(pageViewActionMatched).toBeTruthy()\n    })\n\n    it('can match action on html element selector', () => {\n        const buttonClickedAction = createAction(2, '$autocapture')\n        if (buttonClickedAction.steps) {\n            buttonClickedAction.steps[0].selector = '* > #__next .flex > button:nth-child(2)'\n        }\n\n        const actionMatcher = new ActionMatcher(instance)\n        actionMatcher.register([buttonClickedAction])\n        let buttonClickedActionMatched = false\n\n        const onAction = (actionName: string) => {\n            if (!buttonClickedActionMatched) {\n                buttonClickedActionMatched = actionName === buttonClickedAction.name\n            }\n        }\n        actionMatcher._addActionHook(onAction)\n\n        const result = createCaptureResult('$autocapture', 'https://eu.posthog.com')\n        result.properties.$element_selectors = []\n        actionMatcher.on('$autocapture', result)\n        expect(buttonClickedActionMatched).toBeFalsy()\n\n        result.properties.$element_selectors = ['* > #__next .flex > button:nth-child(2)']\n\n        actionMatcher.on('$autocapture', result)\n        expect(buttonClickedActionMatched).toBeTruthy()\n    })\n})\n"]}