{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/extensions/web-vitals/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../../posthog-core'\nimport { DecideResponse } from '../../types'\nimport { logger } from '../../utils/logger'\nimport { isBoolean, isNullish, isObject, isUndefined } from '../../utils/type-utils'\nimport { WEB_VITALS_ENABLED_SERVER_SIDE } from '../../constants'\nimport { assignableWindow, window } from '../../utils/globals'\nimport Config from '../../config'\n\nexport const FLUSH_TO_CAPTURE_TIMEOUT_MILLISECONDS = 8000\nconst LOGGER_PREFIX = '[Web Vitals]'\ntype WebVitalsEventBuffer = { url: string | undefined; metrics: any[]; firstMetricTimestamp: number | undefined }\n\nexport class WebVitalsAutocapture {\n    private _enabledServerSide: boolean = false\n    private _initialized = false\n\n    private buffer: WebVitalsEventBuffer = { url: undefined, metrics: [], firstMetricTimestamp: undefined }\n    private _delayedFlushTimer: number | undefined\n\n    constructor(private readonly instance: PostHog) {\n        this._enabledServerSide = !!this.instance.persistence?.props[WEB_VITALS_ENABLED_SERVER_SIDE]\n        this.startIfEnabled()\n    }\n\n    public get isEnabled(): boolean {\n        const clientConfig = isObject(this.instance.config.capture_performance)\n            ? this.instance.config.capture_performance.web_vitals\n            : undefined\n        return isBoolean(clientConfig) ? clientConfig : this._enabledServerSide\n    }\n\n    public startIfEnabled(): void {\n        if (this.isEnabled && !this._initialized) {\n            logger.info(LOGGER_PREFIX + ' enabled, starting...')\n            this.loadScript(this._startCapturing)\n        }\n    }\n\n    public afterDecideResponse(response: DecideResponse) {\n        const webVitalsOptIn = isObject(response.capturePerformance) && !!response.capturePerformance.web_vitals\n\n        if (this.instance.persistence) {\n            this.instance.persistence.register({\n                [WEB_VITALS_ENABLED_SERVER_SIDE]: webVitalsOptIn,\n            })\n        }\n        // store this in-memory in case persistence is disabled\n        this._enabledServerSide = webVitalsOptIn\n\n        this.startIfEnabled()\n    }\n\n    private loadScript(cb: () => void): void {\n        if ((window as any).postHogWebVitalsCallbacks) {\n            // already loaded\n            cb()\n        }\n\n        this.instance.requestRouter.loadScript(\n            this.instance.requestRouter.endpointFor('assets', `/static/web-vitals.js?v=${Config.LIB_VERSION}`),\n            (err) => {\n                if (err) {\n                    logger.error(LOGGER_PREFIX + ' failed to load script', err)\n                }\n                cb()\n            }\n        )\n    }\n\n    private _currentURL(): string | undefined {\n        // TODO you should be able to mask the URL here\n        const href = window ? window.location.href : undefined\n        if (!href) {\n            logger.error(LOGGER_PREFIX + 'Could not determine current URL')\n        }\n        return href\n    }\n\n    private _flushToCapture = () => {\n        clearTimeout(this._delayedFlushTimer)\n        if (this.buffer.metrics.length === 0) {\n            return\n        }\n\n        this.instance.capture(\n            '$web_vitals',\n            this.buffer.metrics.reduce(\n                (acc, metric) => ({\n                    ...acc,\n                    // the entire event so we can use it in the future e.g. includes google's rating\n                    [`$web_vitals_${metric.name}_event`]: { ...metric },\n                    [`$web_vitals_${metric.name}_value`]: metric.value,\n                }),\n                {}\n            )\n        )\n        this.buffer = { url: undefined, metrics: [], firstMetricTimestamp: undefined }\n    }\n\n    private _addToBuffer = (metric: any) => {\n        const sessionIds = this.instance.sessionManager?.checkAndGetSessionAndWindowId(true)\n        if (isUndefined(sessionIds)) {\n            logger.error(LOGGER_PREFIX + 'Could not read session ID. Dropping metrics!')\n            return\n        }\n\n        this.buffer = this.buffer || {}\n\n        const $currentUrl = this._currentURL()\n        if (isUndefined($currentUrl)) {\n            return\n        }\n\n        if (isNullish(metric?.name) || isNullish(metric?.value)) {\n            logger.error(LOGGER_PREFIX + 'Invalid metric received', metric)\n            return\n        }\n\n        const urlHasChanged = this.buffer.url !== $currentUrl\n\n        if (urlHasChanged) {\n            // we need to send what we have\n            this._flushToCapture()\n            // poor performance is >4s, we wait twice that time to send\n            // this is in case we haven't received all metrics\n            // we'll at least gather some\n            this._delayedFlushTimer = setTimeout(this._flushToCapture, FLUSH_TO_CAPTURE_TIMEOUT_MILLISECONDS)\n        }\n\n        if (isUndefined(this.buffer.url)) {\n            this.buffer.url = $currentUrl\n        }\n\n        this.buffer.firstMetricTimestamp = isUndefined(this.buffer.firstMetricTimestamp)\n            ? Date.now()\n            : this.buffer.firstMetricTimestamp\n\n        this.buffer.metrics.push({\n            ...metric,\n            $current_url: $currentUrl,\n            $session_id: sessionIds.sessionId,\n            $window_id: sessionIds.windowId,\n            timestamp: Date.now(),\n        })\n\n        if (this.buffer.metrics.length === 4) {\n            // we have all 4 metrics\n            this._flushToCapture()\n        }\n    }\n\n    private _startCapturing = () => {\n        const { onLCP, onCLS, onFCP, onINP } = assignableWindow.postHogWebVitalsCallbacks\n\n        // register performance observers\n        onLCP(this._addToBuffer)\n        onCLS(this._addToBuffer)\n        onFCP(this._addToBuffer)\n        onINP(this._addToBuffer)\n\n        this._initialized = true\n    }\n}\n"]}