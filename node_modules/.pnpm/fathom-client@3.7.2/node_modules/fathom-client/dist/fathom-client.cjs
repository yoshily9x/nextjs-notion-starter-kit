"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  blockTrackingForMe: () => blockTrackingForMe,
  enableTrackingForMe: () => enableTrackingForMe,
  isTrackingEnabled: () => isTrackingEnabled,
  load: () => load,
  setSite: () => setSite,
  trackEvent: () => trackEvent,
  trackGoal: () => trackGoal,
  trackPageview: () => trackPageview
});
module.exports = __toCommonJS(src_exports);
var enqueue = (command) => {
  window.__fathomClientQueue = window.__fathomClientQueue || [];
  window.__fathomClientQueue.push(command);
};
var flushQueue = () => {
  window.__fathomIsLoading = false;
  window.__fathomClientQueue = window.__fathomClientQueue || [];
  window.__fathomClientQueue.forEach((command) => {
    switch (command.type) {
      case "trackPageview":
        trackPageview(command.opts);
        return;
      case "trackGoal":
        trackGoal(command.code, command.cents);
        return;
      case "trackEvent":
        trackEvent(command.eventName, command.opts);
        return;
      case "enableTrackingForMe":
        enableTrackingForMe();
        return;
      case "blockTrackingForMe":
        blockTrackingForMe();
        return;
      case "setSite":
        setSite(command.id);
        return;
    }
  });
  window.__fathomClientQueue = [];
};
var checkDomainsAndWarn = (domains) => {
  const regex = /(https?)(?=:|\/|$)/;
  domains.forEach((domain) => {
    if (regex.exec(domain) !== null)
      console.warn(
        `The include domain ${domain} might fail to work as intended as it begins with a transfer protocol (http://, https://). Consider removing the protocol portion of the string.`
      );
  });
};
var load = (siteId, opts) => {
  if (window.__fathomIsLoading || window.fathom) return;
  window.__fathomIsLoading = true;
  let tracker = document.createElement("script");
  let firstScript = document.getElementsByTagName("script")[0] || document.querySelector("body");
  tracker.id = "fathom-script";
  tracker.async = true;
  tracker.setAttribute("data-site", siteId);
  tracker.src = opts && opts.url ? opts.url : "https://cdn.usefathom.com/script.js";
  if (opts) {
    if (opts.auto !== void 0)
      tracker.setAttribute("data-auto", `${opts.auto}`);
    if (opts.honorDNT !== void 0)
      tracker.setAttribute("data-honor-dnt", `${opts.honorDNT}`);
    if (opts.canonical !== void 0)
      tracker.setAttribute("data-canonical", `${opts.canonical}`);
    if (opts.includedDomains) {
      checkDomainsAndWarn(opts.includedDomains);
      tracker.setAttribute(
        "data-included-domains",
        opts.includedDomains.join(",")
      );
    }
    if (opts.excludedDomains) {
      checkDomainsAndWarn(opts.excludedDomains);
      tracker.setAttribute(
        "data-excluded-domains",
        opts.excludedDomains.join(",")
      );
    }
    if (opts.spa) tracker.setAttribute("data-spa", opts.spa);
  }
  tracker.onload = flushQueue;
  firstScript.parentNode.insertBefore(tracker, firstScript);
};
var trackPageview = (opts) => {
  if (window.fathom) {
    if (opts) {
      window.fathom.trackPageview(opts);
    } else {
      window.fathom.trackPageview();
    }
  } else {
    enqueue({ type: "trackPageview", opts });
  }
};
var trackGoal = (code, cents) => {
  if (window.fathom) {
    window.fathom.trackGoal(code, cents);
  } else {
    enqueue({ type: "trackGoal", code, cents });
  }
};
var trackEvent = (eventName, opts) => {
  if (window.fathom) {
    window.fathom.trackEvent(eventName, opts);
  } else {
    enqueue({ type: "trackEvent", eventName, opts });
  }
};
var blockTrackingForMe = () => {
  if (window.fathom) {
    window.fathom.blockTrackingForMe();
  } else {
    enqueue({ type: "blockTrackingForMe" });
  }
};
var enableTrackingForMe = () => {
  if (window.fathom) {
    window.fathom.enableTrackingForMe();
  } else {
    enqueue({ type: "enableTrackingForMe" });
  }
};
var isTrackingEnabled = () => {
  const preferenceStorage = localStorage.getItem(
    "blockFathomTracking"
  );
  return preferenceStorage !== null ? preferenceStorage !== "true" : true;
};
var setSite = (id) => {
  if (window.fathom) {
    window.fathom.setSite(id);
  } else {
    enqueue({ type: "setSite", id });
  }
};
