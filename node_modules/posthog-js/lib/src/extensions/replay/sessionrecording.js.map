{"version":3,"file":"sessionrecording.js","sourceRoot":"","sources":["../../../../src/extensions/replay/sessionrecording.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE,\n    SESSION_RECORDING_CANVAS_RECORDING,\n    SESSION_RECORDING_ENABLED_SERVER_SIDE,\n    SESSION_RECORDING_IS_SAMPLED,\n    SESSION_RECORDING_MINIMUM_DURATION,\n    SESSION_RECORDING_NETWORK_PAYLOAD_CAPTURE,\n    SESSION_RECORDING_SAMPLE_RATE,\n} from '../../constants'\nimport {\n    estimateSize,\n    FULL_SNAPSHOT_EVENT_TYPE,\n    INCREMENTAL_SNAPSHOT_EVENT_TYPE,\n    META_EVENT_TYPE,\n    recordOptions,\n    rrwebRecord,\n    splitBuffer,\n    truncateLargeConsoleLogs,\n} from './sessionrecording-utils'\nimport { PostHog } from '../../posthog-core'\nimport { DecideResponse, FlagVariant, NetworkRecordOptions, NetworkRequest, Properties } from '../../types'\nimport { EventType, type eventWithTime, IncrementalSource, type listenerHandler, RecordPlugin } from '@rrweb/types'\nimport Config from '../../config'\nimport { timestamp } from '../../utils'\n\nimport {\n    isBoolean,\n    isFunction,\n    isNull,\n    isNullish,\n    isNumber,\n    isObject,\n    isString,\n    isUndefined,\n} from '../../utils/type-utils'\nimport { logger } from '../../utils/logger'\nimport { assignableWindow, document, window } from '../../utils/globals'\nimport { buildNetworkRequestOptions } from './config'\nimport { isLocalhost } from '../../utils/request-utils'\nimport { MutationRateLimiter } from './mutation-rate-limiter'\n\nconst BASE_ENDPOINT = '/s/'\n\nconst FIVE_MINUTES = 1000 * 60 * 5\nconst TWO_SECONDS = 2000\nexport const RECORDING_IDLE_ACTIVITY_TIMEOUT_MS = FIVE_MINUTES\nexport const RECORDING_MAX_EVENT_SIZE = 1024 * 1024 * 0.9 // ~1mb (with some wiggle room)\nexport const RECORDING_BUFFER_TIMEOUT = 2000 // 2 seconds\nexport const SESSION_RECORDING_BATCH_KEY = 'recordings'\n\n// NOTE: Importing this type is problematic as we can't safely bundle it to a TS definition so, instead we redefine.\n// import type { record } from 'rrweb2/typings'\n// import type { recordOptions } from 'rrweb/typings/types'\n\nconst ACTIVE_SOURCES = [\n    IncrementalSource.MouseMove,\n    IncrementalSource.MouseInteraction,\n    IncrementalSource.Scroll,\n    IncrementalSource.ViewportResize,\n    IncrementalSource.Input,\n    IncrementalSource.TouchMove,\n    IncrementalSource.MediaInteraction,\n    IncrementalSource.Drag,\n]\n\n/**\n * Session recording starts in buffering mode while waiting for decide response\n * Once the response is received it might be disabled, active or sampled\n * When sampled that means a sample rate is set and the last time the session id was rotated\n * the sample rate determined this session should be sent to the server.\n */\ntype SessionRecordingStatus = 'disabled' | 'sampled' | 'active' | 'buffering'\n\nexport interface SnapshotBuffer {\n    size: number\n    data: any[]\n    sessionId: string\n    windowId: string\n}\n\ninterface QueuedRRWebEvent {\n    rrwebMethod: () => void\n    attempt: number\n    // the timestamp this was first put into this queue\n    enqueuedAt: number\n}\n\nconst newQueuedEvent = (rrwebMethod: () => void): QueuedRRWebEvent => ({\n    rrwebMethod,\n    enqueuedAt: Date.now(),\n    attempt: 1,\n})\n\nconst LOGGER_PREFIX = '[SessionRecording]'\n\nexport class SessionRecording {\n    private _endpoint: string\n    private flushBufferTimer?: any\n\n    // we have a buffer - that contains PostHog snapshot events ready to be sent to the server\n    private buffer: SnapshotBuffer\n    // and a queue - that contains rrweb events that we want to send to rrweb, but rrweb wasn't able to accept them yet\n    private queuedRRWebEvents: QueuedRRWebEvent[] = []\n\n    private mutationRateLimiter?: MutationRateLimiter\n    private _captureStarted: boolean\n    private stopRrweb: listenerHandler | undefined\n    private receivedDecide: boolean\n    private isIdle = false\n\n    private _linkedFlagSeen: boolean = false\n    private _lastActivityTimestamp: number = Date.now()\n    private windowId: string\n    private sessionId: string\n    private _linkedFlag: string | FlagVariant | null = null\n\n    private _fullSnapshotTimer?: ReturnType<typeof setInterval>\n\n    // if pageview capture is disabled\n    // then we can manually track href changes\n    private _lastHref?: string\n\n    // Util to help developers working on this feature manually override\n    _forceAllowLocalhostNetworkCapture = false\n\n    private get rrwebRecord(): rrwebRecord | undefined {\n        return assignableWindow?.rrweb?.record\n    }\n\n    public get started(): boolean {\n        // TODO could we use status instead of _captureStarted?\n        return this._captureStarted\n    }\n\n    private get sessionManager() {\n        if (!this.instance.sessionManager) {\n            throw new Error(LOGGER_PREFIX + ' must be started with a valid sessionManager.')\n        }\n\n        return this.instance.sessionManager\n    }\n\n    private get fullSnapshotIntervalMillis(): number {\n        return this.instance.config.session_recording?.full_snapshot_interval_millis || FIVE_MINUTES\n    }\n\n    private get isSampled(): boolean | null {\n        const currentValue = this.instance.get_property(SESSION_RECORDING_IS_SAMPLED)\n        return isBoolean(currentValue) ? currentValue : null\n    }\n\n    private get sessionDuration(): number | null {\n        const mostRecentSnapshot = this.buffer?.data[this.buffer?.data.length - 1]\n        const { sessionStartTimestamp } = this.sessionManager.checkAndGetSessionAndWindowId(true)\n        return mostRecentSnapshot ? mostRecentSnapshot.timestamp - sessionStartTimestamp : null\n    }\n\n    private get isRecordingEnabled() {\n        const enabled_server_side = !!this.instance.get_property(SESSION_RECORDING_ENABLED_SERVER_SIDE)\n        const enabled_client_side = !this.instance.config.disable_session_recording\n        return window && enabled_server_side && enabled_client_side\n    }\n\n    private get isConsoleLogCaptureEnabled() {\n        const enabled_server_side = !!this.instance.get_property(CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE)\n        const enabled_client_side = this.instance.config.enable_recording_console_log\n        return enabled_client_side ?? enabled_server_side\n    }\n\n    private get canvasRecording(): { enabled: boolean; fps: number; quality: number } | undefined {\n        const canvasRecording_server_side = this.instance.get_property(SESSION_RECORDING_CANVAS_RECORDING)\n        return canvasRecording_server_side && canvasRecording_server_side.fps && canvasRecording_server_side.quality\n            ? {\n                  enabled: canvasRecording_server_side.enabled,\n                  fps: canvasRecording_server_side.fps,\n                  quality: canvasRecording_server_side.quality,\n              }\n            : undefined\n    }\n\n    // network payload capture config has three parts\n    // each can be configured server side or client side\n    private get networkPayloadCapture():\n        | Pick<NetworkRecordOptions, 'recordHeaders' | 'recordBody' | 'recordPerformance'>\n        | undefined {\n        const networkPayloadCapture_server_side = this.instance.get_property(SESSION_RECORDING_NETWORK_PAYLOAD_CAPTURE)\n        const networkPayloadCapture_client_side = {\n            recordHeaders: this.instance.config.session_recording?.recordHeaders,\n            recordBody: this.instance.config.session_recording?.recordBody,\n        }\n        const headersEnabled =\n            networkPayloadCapture_client_side?.recordHeaders || networkPayloadCapture_server_side?.recordHeaders\n        const bodyEnabled =\n            networkPayloadCapture_client_side?.recordBody || networkPayloadCapture_server_side?.recordBody\n        const clientConfigForPerformanceCapture = isObject(this.instance.config.capture_performance)\n            ? this.instance.config.capture_performance.network_timing\n            : this.instance.config.capture_performance\n        const networkTimingEnabled = !!(isBoolean(clientConfigForPerformanceCapture)\n            ? clientConfigForPerformanceCapture\n            : networkPayloadCapture_server_side?.capturePerformance)\n\n        return headersEnabled || bodyEnabled || networkTimingEnabled\n            ? { recordHeaders: headersEnabled, recordBody: bodyEnabled, recordPerformance: networkTimingEnabled }\n            : undefined\n    }\n\n    private get sampleRate(): number | null {\n        const rate = this.instance.get_property(SESSION_RECORDING_SAMPLE_RATE)\n        return isNumber(rate) ? rate : null\n    }\n\n    private get minimumDuration(): number | null {\n        const duration = this.instance.get_property(SESSION_RECORDING_MINIMUM_DURATION)\n        return isNumber(duration) ? duration : null\n    }\n\n    /**\n     * defaults to buffering mode until a decide response is received\n     * once a decide response is received status can be disabled, active or sampled\n     */\n    private get status(): SessionRecordingStatus {\n        if (!this.receivedDecide) {\n            return 'buffering'\n        }\n\n        if (!this.isRecordingEnabled) {\n            return 'disabled'\n        }\n\n        if (!isNullish(this._linkedFlag) && !this._linkedFlagSeen) {\n            return 'buffering'\n        }\n\n        if (isBoolean(this.isSampled)) {\n            return this.isSampled ? 'sampled' : 'disabled'\n        } else {\n            return 'active'\n        }\n    }\n\n    constructor(private readonly instance: PostHog) {\n        this._captureStarted = false\n        this._endpoint = BASE_ENDPOINT\n        this.stopRrweb = undefined\n        this.receivedDecide = false\n\n        window?.addEventListener('beforeunload', () => {\n            this._flushBuffer()\n        })\n\n        window?.addEventListener('offline', () => {\n            this._tryAddCustomEvent('browser offline', {})\n        })\n\n        window?.addEventListener('online', () => {\n            this._tryAddCustomEvent('browser online', {})\n        })\n\n        window?.addEventListener('visibilitychange', () => {\n            if (document?.visibilityState) {\n                const label = 'window ' + document.visibilityState\n                this._tryAddCustomEvent(label, {})\n            }\n        })\n\n        if (!this.instance.sessionManager) {\n            logger.error(LOGGER_PREFIX + ' started without valid sessionManager')\n            throw new Error(LOGGER_PREFIX + ' started without valid sessionManager. This is a bug.')\n        }\n\n        // we know there's a sessionManager, so don't need to start without a session id\n        const { sessionId, windowId } = this.sessionManager.checkAndGetSessionAndWindowId()\n        this.sessionId = sessionId\n        this.windowId = windowId\n\n        this.buffer = this.clearBuffer()\n\n        // on reload there might be an already sampled session that should be continued before decide response,\n        // so we call this here _and_ in the decide response\n        this._setupSampling()\n    }\n\n    startIfEnabledOrStop() {\n        if (this.isRecordingEnabled) {\n            this._startCapture()\n            logger.info(LOGGER_PREFIX + ' started')\n        } else {\n            this.stopRecording()\n            this.clearBuffer()\n        }\n    }\n\n    stopRecording() {\n        if (this._captureStarted && this.stopRrweb) {\n            this.stopRrweb()\n            this.stopRrweb = undefined\n            this._captureStarted = false\n            logger.info(LOGGER_PREFIX + ' stopped')\n        }\n    }\n\n    private makeSamplingDecision(sessionId: string): void {\n        const sessionIdChanged = this.sessionId !== sessionId\n\n        // capture the current sample rate,\n        // because it is re-used multiple times\n        // and the bundler won't minimise any of the references\n        const currentSampleRate = this.sampleRate\n\n        if (!isNumber(currentSampleRate)) {\n            this.instance.persistence?.register({\n                [SESSION_RECORDING_IS_SAMPLED]: null,\n            })\n            return\n        }\n\n        const storedIsSampled = this.isSampled\n\n        /**\n         * if we get this far then we should make a sampling decision.\n         * When the session id changes or there is no stored sampling decision for this session id\n         * then we should make a new decision.\n         *\n         * Otherwise, we should use the stored decision.\n         */\n        let shouldSample: boolean\n        const makeDecision = sessionIdChanged || !isBoolean(storedIsSampled)\n        if (makeDecision) {\n            const randomNumber = Math.random()\n            shouldSample = randomNumber < currentSampleRate\n        } else {\n            shouldSample = storedIsSampled\n        }\n\n        if (!shouldSample && makeDecision) {\n            logger.warn(\n                LOGGER_PREFIX +\n                    ` Sample rate (${currentSampleRate}) has determined that this sessionId (${sessionId}) will not be sent to the server.`\n            )\n        }\n        this._tryAddCustomEvent('samplingDecisionMade', {\n            sampleRate: currentSampleRate,\n        })\n\n        this.instance.persistence?.register({\n            [SESSION_RECORDING_IS_SAMPLED]: shouldSample,\n        })\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        this._persistDecideResponse(response)\n\n        this._linkedFlag = response.sessionRecording?.linkedFlag || null\n\n        if (response.sessionRecording?.endpoint) {\n            this._endpoint = response.sessionRecording?.endpoint\n        }\n\n        this._setupSampling()\n\n        if (!isNullish(this._linkedFlag)) {\n            const linkedFlag = isString(this._linkedFlag) ? this._linkedFlag : this._linkedFlag.flag\n            const linkedVariant = isString(this._linkedFlag) ? null : this._linkedFlag.variant\n            this.instance.onFeatureFlags((_flags, variants) => {\n                const flagIsPresent = isObject(variants) && linkedFlag in variants\n                const linkedFlagMatches = linkedVariant ? variants[linkedFlag] === linkedVariant : flagIsPresent\n                if (linkedFlagMatches) {\n                    const payload = {\n                        linkedFlag,\n                        linkedVariant,\n                    }\n                    const tag = 'linked flag matched'\n                    logger.info(LOGGER_PREFIX + ' ' + tag, payload)\n                    this._tryAddCustomEvent(tag, payload)\n                }\n                this._linkedFlagSeen = linkedFlagMatches\n            })\n        }\n\n        this.receivedDecide = true\n        this.startIfEnabledOrStop()\n    }\n\n    private _samplingSessionListener: (() => void) | null = null\n\n    /**\n     * This might be called more than once so needs to be idempotent\n     */\n    private _setupSampling() {\n        if (isNumber(this.sampleRate) && isNull(this._samplingSessionListener)) {\n            this._samplingSessionListener = this.sessionManager.onSessionId((sessionId) => {\n                this.makeSamplingDecision(sessionId)\n            })\n        }\n    }\n\n    private _persistDecideResponse(response: DecideResponse): void {\n        if (this.instance.persistence) {\n            const persistence = this.instance.persistence\n\n            const persistResponse = () => {\n                const receivedSampleRate = response.sessionRecording?.sampleRate\n\n                const parsedSampleRate = isNullish(receivedSampleRate) ? null : parseFloat(receivedSampleRate)\n                const receivedMinimumDuration = response.sessionRecording?.minimumDurationMilliseconds\n\n                persistence.register({\n                    [SESSION_RECORDING_ENABLED_SERVER_SIDE]: !!response['sessionRecording'],\n                    [CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE]: response.sessionRecording?.consoleLogRecordingEnabled,\n                    [SESSION_RECORDING_NETWORK_PAYLOAD_CAPTURE]: {\n                        capturePerformance: response.capturePerformance,\n                        ...response.sessionRecording?.networkPayloadCapture,\n                    },\n                    [SESSION_RECORDING_CANVAS_RECORDING]: {\n                        enabled: response.sessionRecording?.recordCanvas,\n                        fps: response.sessionRecording?.canvasFps,\n                        quality: response.sessionRecording?.canvasQuality,\n                    },\n                    [SESSION_RECORDING_SAMPLE_RATE]: parsedSampleRate,\n                    [SESSION_RECORDING_MINIMUM_DURATION]: isUndefined(receivedMinimumDuration)\n                        ? null\n                        : receivedMinimumDuration,\n                })\n            }\n\n            persistResponse()\n            this.sessionManager.onSessionId(persistResponse)\n        }\n    }\n\n    log(message: string, level: 'log' | 'warn' | 'error' = 'log') {\n        this.instance.sessionRecording?.onRRwebEmit({\n            type: 6,\n            data: {\n                plugin: 'rrweb/console@1',\n                payload: {\n                    level,\n                    trace: [],\n                    // Even though it is a string we stringify it as that's what rrweb expects\n                    payload: [JSON.stringify(message)],\n                },\n            },\n            timestamp: timestamp(),\n        })\n    }\n\n    private _startCapture() {\n        if (isUndefined(Object.assign)) {\n            // According to the rrweb docs, rrweb is not supported on IE11 and below:\n            // \"rrweb does not support IE11 and below because it uses the MutationObserver API which was supported by these browsers.\"\n            // https://github.com/rrweb-io/rrweb/blob/master/guide.md#compatibility-note\n            //\n            // However, MutationObserver does exist on IE11, it just doesn't work well and does not detect all changes.\n            // Instead, when we load \"recorder.js\", the first JS error is about \"Object.assign\" being undefined.\n            // Thus instead of MutationObserver, we look for this function and block recording if it's undefined.\n            return\n        }\n\n        // We do not switch recorder versions midway through a recording.\n        // do not start if explicitly disabled or if the user has opted out\n        if (\n            this._captureStarted ||\n            this.instance.config.disable_session_recording ||\n            this.instance.consent.isOptedOut()\n        ) {\n            return\n        }\n\n        this._captureStarted = true\n        // We want to ensure the sessionManager is reset if necessary on load of the recorder\n        this.sessionManager.checkAndGetSessionAndWindowId()\n\n        // If recorder.js is already loaded (if array.full.js snippet is used or posthog-js/dist/recorder is\n        // imported), don't load script. Otherwise, remotely import recorder.js from cdn since it hasn't been loaded.\n        if (!this.rrwebRecord) {\n            this.instance.requestRouter.loadScript(`/static/recorder.js?v=${Config.LIB_VERSION}`, (err) => {\n                if (err) {\n                    return logger.error(LOGGER_PREFIX + ` could not load recorder.js`, err)\n                }\n\n                this._onScriptLoaded()\n            })\n        } else {\n            this._onScriptLoaded()\n        }\n    }\n\n    private isInteractiveEvent(event: eventWithTime) {\n        return (\n            event.type === INCREMENTAL_SNAPSHOT_EVENT_TYPE &&\n            ACTIVE_SOURCES.indexOf(event.data?.source as IncrementalSource) !== -1\n        )\n    }\n\n    private _updateWindowAndSessionIds(event: eventWithTime) {\n        // Some recording events are triggered by non-user events (e.g. \"X minutes ago\" text updating on the screen).\n        // We don't want to extend the session or trigger a new session in these cases. These events are designated by event\n        // type -> incremental update, and source -> mutation.\n\n        const isUserInteraction = this.isInteractiveEvent(event)\n\n        if (!isUserInteraction && !this.isIdle) {\n            // We check if the lastActivityTimestamp is old enough to go idle\n            if (event.timestamp - this._lastActivityTimestamp > RECORDING_IDLE_ACTIVITY_TIMEOUT_MS) {\n                this.isIdle = true\n                // don't take full snapshots while idle\n                clearTimeout(this._fullSnapshotTimer)\n                // proactively flush the buffer in case the session is idle for a long time\n                this._flushBuffer()\n            }\n        }\n\n        let returningFromIdle = false\n        if (isUserInteraction) {\n            this._lastActivityTimestamp = event.timestamp\n            if (this.isIdle) {\n                // Remove the idle state\n                this.isIdle = false\n                this._tryAddCustomEvent('sessionNoLongerIdle', {\n                    reason: 'user activity',\n                    type: event.type,\n                })\n                returningFromIdle = true\n            }\n        }\n\n        if (this.isIdle) {\n            return\n        }\n\n        // We only want to extend the session if it is an interactive event.\n        const { windowId, sessionId } = this.sessionManager.checkAndGetSessionAndWindowId(\n            !isUserInteraction,\n            event.timestamp\n        )\n\n        const sessionIdChanged = this.sessionId !== sessionId\n        const windowIdChanged = this.windowId !== windowId\n\n        this.windowId = windowId\n        this.sessionId = sessionId\n\n        if (\n            returningFromIdle ||\n            ([FULL_SNAPSHOT_EVENT_TYPE, META_EVENT_TYPE].indexOf(event.type) === -1 &&\n                (windowIdChanged || sessionIdChanged || isUndefined(this._fullSnapshotTimer)))\n        ) {\n            this._tryTakeFullSnapshot()\n        }\n    }\n\n    private _tryRRWebMethod(queuedRRWebEvent: QueuedRRWebEvent): boolean {\n        try {\n            queuedRRWebEvent.rrwebMethod()\n            return true\n        } catch (e) {\n            // Sometimes a race can occur where the recorder is not fully started yet\n            if (this.queuedRRWebEvents.length < 10) {\n                this.queuedRRWebEvents.push({\n                    enqueuedAt: queuedRRWebEvent.enqueuedAt || Date.now(),\n                    attempt: queuedRRWebEvent.attempt++,\n                    rrwebMethod: queuedRRWebEvent.rrwebMethod,\n                })\n            } else {\n                logger.warn(LOGGER_PREFIX + ' could not emit queued rrweb event.', e, queuedRRWebEvent)\n            }\n\n            return false\n        }\n    }\n\n    private _tryAddCustomEvent(tag: string, payload: any): boolean {\n        return this._tryRRWebMethod(newQueuedEvent(() => this.rrwebRecord!.addCustomEvent(tag, payload)))\n    }\n\n    private _tryTakeFullSnapshot(): boolean {\n        return this._tryRRWebMethod(newQueuedEvent(() => this.rrwebRecord!.takeFullSnapshot()))\n    }\n\n    private _onScriptLoaded() {\n        // rrweb config info: https://github.com/rrweb-io/rrweb/blob/7d5d0033258d6c29599fb08412202d9a2c7b9413/src/record/index.ts#L28\n        const sessionRecordingOptions: recordOptions<eventWithTime> = {\n            // select set of rrweb config options we expose to our users\n            // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n            blockClass: 'ph-no-capture',\n            blockSelector: undefined,\n            ignoreClass: 'ph-ignore-input',\n            maskTextClass: 'ph-mask',\n            maskTextSelector: undefined,\n            maskTextFn: undefined,\n            maskAllInputs: true,\n            maskInputOptions: {},\n            maskInputFn: undefined,\n            slimDOMOptions: {},\n            collectFonts: false,\n            inlineStylesheet: true,\n            recordCrossOriginIframes: false,\n        }\n\n        // only allows user to set our allow-listed options\n        const userSessionRecordingOptions = this.instance.config.session_recording\n        for (const [key, value] of Object.entries(userSessionRecordingOptions || {})) {\n            if (key in sessionRecordingOptions) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                sessionRecordingOptions[key] = value\n            }\n        }\n\n        if (this.canvasRecording && this.canvasRecording.enabled) {\n            sessionRecordingOptions.recordCanvas = true\n            sessionRecordingOptions.sampling = { canvas: this.canvasRecording.fps }\n            sessionRecordingOptions.dataURLOptions = { type: 'image/webp', quality: this.canvasRecording.quality }\n        }\n\n        if (!this.rrwebRecord) {\n            logger.error(\n                LOGGER_PREFIX +\n                    'onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.'\n            )\n            return\n        }\n\n        this.mutationRateLimiter =\n            this.mutationRateLimiter ??\n            new MutationRateLimiter(this.rrwebRecord, {\n                onBlockedNode: (id, node) => {\n                    const message = `Too many mutations on node '${id}'. Rate limiting. This could be due to SVG animations or something similar`\n                    logger.info(message, {\n                        node: node,\n                    })\n\n                    this.log(LOGGER_PREFIX + ' ' + message, 'warn')\n                },\n            })\n\n        const activePlugins = this._gatherRRWebPlugins()\n        this.stopRrweb = this.rrwebRecord({\n            emit: (event) => {\n                this.onRRwebEmit(event)\n            },\n            plugins: activePlugins,\n            ...sessionRecordingOptions,\n        })\n\n        // :TRICKY: rrweb does not capture navigation within SPA-s, so hook into our $pageview events to get access to all events.\n        //   Dropping the initial event is fine (it's always captured by rrweb).\n        this.instance._addCaptureHook((eventName) => {\n            // If anything could go wrong here it has the potential to block the main loop,\n            // so we catch all errors.\n            try {\n                if (eventName === '$pageview') {\n                    const href = window ? this._maskUrl(window.location.href) : ''\n                    if (!href) {\n                        return\n                    }\n                    this._tryAddCustomEvent('$pageview', { href })\n                }\n            } catch (e) {\n                logger.error('Could not add $pageview to rrweb session', e)\n            }\n        })\n\n        // We reset the last activity timestamp, resetting the idle timer\n        this._lastActivityTimestamp = Date.now()\n        this.isIdle = false\n\n        this._tryAddCustomEvent('$session_options', {\n            sessionRecordingOptions,\n            activePlugins: activePlugins.map((p) => p?.name),\n        })\n\n        this._tryAddCustomEvent('$posthog_config', {\n            config: this.instance.config,\n        })\n    }\n\n    private _scheduleFullSnapshot(): void {\n        if (this._fullSnapshotTimer) {\n            clearInterval(this._fullSnapshotTimer)\n        }\n        // we don't schedule snapshots while idle\n        if (this.isIdle) {\n            return\n        }\n\n        const interval = this.fullSnapshotIntervalMillis\n        if (!interval) {\n            return\n        }\n\n        this._fullSnapshotTimer = setInterval(() => {\n            this._tryTakeFullSnapshot()\n        }, interval)\n    }\n\n    private _gatherRRWebPlugins() {\n        const plugins: RecordPlugin<unknown>[] = []\n\n        if (assignableWindow.rrwebConsoleRecord && this.isConsoleLogCaptureEnabled) {\n            plugins.push(assignableWindow.rrwebConsoleRecord.getRecordConsolePlugin())\n        }\n\n        if (this.networkPayloadCapture && isFunction(assignableWindow.getRecordNetworkPlugin)) {\n            const canRecordNetwork = !isLocalhost() || this._forceAllowLocalhostNetworkCapture\n\n            if (canRecordNetwork) {\n                plugins.push(\n                    assignableWindow.getRecordNetworkPlugin(\n                        buildNetworkRequestOptions(this.instance.config, this.networkPayloadCapture)\n                    )\n                )\n            } else {\n                logger.info(LOGGER_PREFIX + ' NetworkCapture not started because we are on localhost.')\n            }\n        }\n\n        return plugins\n    }\n\n    onRRwebEmit(rawEvent: eventWithTime) {\n        this._processQueuedEvents()\n\n        if (!rawEvent || !isObject(rawEvent)) {\n            return\n        }\n\n        if (rawEvent.type === EventType.Meta) {\n            const href = this._maskUrl(rawEvent.data.href)\n            this._lastHref = href\n            if (!href) {\n                return\n            }\n            rawEvent.data.href = href\n        } else {\n            this._pageViewFallBack()\n        }\n\n        // we're processing a full snapshot, so we should reset the timer\n        if (rawEvent.type === EventType.FullSnapshot) {\n            this._scheduleFullSnapshot()\n        }\n\n        const throttledEvent = this.mutationRateLimiter\n            ? this.mutationRateLimiter.throttleMutations(rawEvent)\n            : rawEvent\n\n        if (!throttledEvent) {\n            return\n        }\n\n        // TODO: Re-add ensureMaxMessageSize once we are confident in it\n        const event = truncateLargeConsoleLogs(throttledEvent)\n        const size = estimateSize(event)\n\n        this._updateWindowAndSessionIds(event)\n\n        // When in an idle state we keep recording, but don't capture the events\n        // but we allow custom events even when idle\n        if (this.isIdle && event.type !== EventType.Custom) {\n            return\n        }\n\n        const properties = {\n            $snapshot_bytes: size,\n            $snapshot_data: event,\n            $session_id: this.sessionId,\n            $window_id: this.windowId,\n        }\n\n        if (this.status !== 'disabled') {\n            this._captureSnapshotBuffered(properties)\n        } else {\n            this.clearBuffer()\n        }\n    }\n\n    private _pageViewFallBack() {\n        if (this.instance.config.capture_pageview || !window) {\n            return\n        }\n        const currentUrl = this._maskUrl(window.location.href)\n        if (this._lastHref !== currentUrl) {\n            this._tryAddCustomEvent('$url_changed', { href: currentUrl })\n            this._lastHref = currentUrl\n        }\n    }\n\n    private _processQueuedEvents() {\n        if (this.queuedRRWebEvents.length) {\n            // if rrweb isn't ready to accept events earlier then we queued them up\n            // now that emit has been called rrweb should be ready to accept them\n            // so, before we process this event, we try our queued events _once_ each\n            // we don't want to risk queuing more things and never exiting this loop!\n            // if they fail here, they'll be pushed into a new queue,\n            // and tried on the next loop.\n            // there is a risk of this queue growing in an uncontrolled manner,\n            // so its length is limited elsewhere\n            // for now this is to help us ensure we can capture events that happen\n            // and try to identify more about when it is failing\n            const itemsToProcess = [...this.queuedRRWebEvents]\n            this.queuedRRWebEvents = []\n            itemsToProcess.forEach((queuedRRWebEvent) => {\n                if (Date.now() - queuedRRWebEvent.enqueuedAt <= TWO_SECONDS) {\n                    this._tryRRWebMethod(queuedRRWebEvent)\n                }\n            })\n        }\n    }\n\n    private _maskUrl(url: string): string | undefined {\n        const userSessionRecordingOptions = this.instance.config.session_recording\n\n        if (userSessionRecordingOptions.maskNetworkRequestFn) {\n            let networkRequest: NetworkRequest | null | undefined = {\n                url,\n            }\n\n            // TODO we should deprecate this and use the same function for this masking and the rrweb/network plugin\n            // TODO or deprecate this and provide a new clearer name so this would be `maskURLPerformanceFn` or similar\n            networkRequest = userSessionRecordingOptions.maskNetworkRequestFn(networkRequest)\n\n            return networkRequest?.url\n        }\n\n        return url\n    }\n\n    private clearBuffer(): SnapshotBuffer {\n        this.buffer = {\n            size: 0,\n            data: [],\n            sessionId: this.sessionId,\n            windowId: this.windowId,\n        }\n        return this.buffer\n    }\n\n    private _flushBuffer(): SnapshotBuffer {\n        if (this.flushBufferTimer) {\n            clearTimeout(this.flushBufferTimer)\n            this.flushBufferTimer = undefined\n        }\n\n        const minimumDuration = this.minimumDuration\n        const sessionDuration = this.sessionDuration\n        // if we have old data in the buffer but the session has rotated then the\n        // session duration might be negative, in that case we want to flush the buffer\n        const isPositiveSessionDuration = isNumber(sessionDuration) && sessionDuration >= 0\n        const isBelowMinimumDuration =\n            isNumber(minimumDuration) && isPositiveSessionDuration && sessionDuration < minimumDuration\n\n        if (this.status === 'buffering' || isBelowMinimumDuration) {\n            this.flushBufferTimer = setTimeout(() => {\n                this._flushBuffer()\n            }, RECORDING_BUFFER_TIMEOUT)\n            return this.buffer\n        }\n\n        if (this.buffer.data.length > 0) {\n            const snapshotEvents = splitBuffer(this.buffer)\n            snapshotEvents.forEach((snapshotBuffer) => {\n                this._captureSnapshot({\n                    $snapshot_bytes: snapshotBuffer.size,\n                    $snapshot_data: snapshotBuffer.data,\n                    $session_id: snapshotBuffer.sessionId,\n                    $window_id: snapshotBuffer.windowId,\n                })\n            })\n        }\n\n        // buffer is empty, we clear it in case the session id has changed\n        return this.clearBuffer()\n    }\n\n    private _captureSnapshotBuffered(properties: Properties) {\n        const additionalBytes = 2 + (this.buffer?.data.length || 0) // 2 bytes for the array brackets and 1 byte for each comma\n        if (\n            this.buffer.size + properties.$snapshot_bytes + additionalBytes > RECORDING_MAX_EVENT_SIZE ||\n            this.buffer.sessionId !== this.sessionId\n        ) {\n            this.buffer = this._flushBuffer()\n        }\n\n        this.buffer.size += properties.$snapshot_bytes\n        this.buffer.data.push(properties.$snapshot_data)\n\n        if (!this.flushBufferTimer) {\n            this.flushBufferTimer = setTimeout(() => {\n                this._flushBuffer()\n            }, RECORDING_BUFFER_TIMEOUT)\n        }\n    }\n\n    private _captureSnapshot(properties: Properties) {\n        // :TRICKY: Make sure we batch these requests, use a custom endpoint and don't truncate the strings.\n        this.instance.capture('$snapshot', properties, {\n            _url: this.instance.requestRouter.endpointFor('api', this._endpoint),\n            _noTruncate: true,\n            _batchKey: SESSION_RECORDING_BATCH_KEY,\n        })\n    }\n}\n"]}