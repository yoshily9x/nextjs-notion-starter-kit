{"version":3,"file":"error-conversion.js","sourceRoot":"","sources":["../../../../src/extensions/exception-autocapture/error-conversion.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    isDOMError,\n    isDOMException,\n    isError,\n    isErrorEvent,\n    isErrorWithStack,\n    isEvent,\n    isPlainObject,\n    isPrimitive,\n} from './type-checking'\nimport { defaultStackParser, StackFrame } from './stack-trace'\n\nimport { isEmptyString, isNumber, isString, isUndefined } from '../../utils/type-utils'\nimport { ErrorEventArgs, ErrorProperties, SeverityLevel, severityLevels } from '../../types'\n\n/**\n * based on the very wonderful MIT licensed Sentry SDK\n */\n\nconst ERROR_TYPES_PATTERN =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i\n\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n    if (ex) {\n        if (isNumber(ex.framesToPop)) {\n            return ex.framesToPop\n        }\n\n        if (reactMinifiedRegexp.test(ex.message)) {\n            return 1\n        }\n    }\n\n    return 0\n}\n\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    const stacktrace = ex.stacktrace || ex.stack || ''\n\n    const popSize = getPopSize(ex)\n\n    try {\n        return defaultStackParser(stacktrace, popSize)\n    } catch (e) {\n        // no-empty\n    }\n\n    return []\n}\n\nfunction errorPropertiesFromError(error: Error): ErrorProperties {\n    const frames = parseStackFrames(error)\n\n    return {\n        $exception_type: error.name,\n        $exception_message: error.message,\n        $exception_stack_trace_raw: JSON.stringify(frames),\n        $exception_level: 'error',\n    }\n}\n\nfunction errorPropertiesFromString(candidate: string): ErrorProperties {\n    return {\n        $exception_type: 'Error',\n        $exception_message: candidate,\n        $exception_level: 'error',\n    }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength = 40): string {\n    const keys = Object.keys(exception)\n    keys.sort()\n\n    if (!keys.length) {\n        return '[object has no keys]'\n    }\n\n    for (let i = keys.length; i > 0; i--) {\n        const serialized = keys.slice(0, i).join(', ')\n        if (serialized.length > maxLength) {\n            continue\n        }\n        if (i === keys.length) {\n            return serialized\n        }\n        return serialized.length <= maxLength ? serialized : `${serialized.slice(0, maxLength)}...`\n    }\n\n    return ''\n}\n\nfunction isSeverityLevel(x: unknown): x is SeverityLevel {\n    return isString(x) && !isEmptyString(x) && severityLevels.indexOf(x as SeverityLevel) >= 0\n}\n\nfunction errorPropertiesFromObject(candidate: Record<string, unknown>): ErrorProperties {\n    return {\n        $exception_type: isEvent(candidate) ? candidate.constructor.name : 'Error',\n        $exception_message: `Non-Error ${'exception'} captured with keys: ${extractExceptionKeysForMessage(candidate)}`,\n        $exception_level: isSeverityLevel(candidate.level) ? candidate.level : 'error',\n    }\n}\n\nexport function errorToProperties([event, source, lineno, colno, error]: ErrorEventArgs): ErrorProperties {\n    // some properties are not optional but, it's useful to start off without them enforced\n    let errorProperties: Omit<ErrorProperties, '$exception_type' | '$exception_message' | '$exception_level'> & {\n        $exception_type?: string\n        $exception_message?: string\n        $exception_level?: string\n    } = {}\n\n    if (isUndefined(error) && isString(event)) {\n        let name = 'Error'\n        let message = event\n        const groups = event.match(ERROR_TYPES_PATTERN)\n        if (groups) {\n            name = groups[1]\n            message = groups[2]\n        }\n        errorProperties = {\n            $exception_type: name,\n            $exception_message: message,\n        }\n    }\n\n    const candidate = error || event\n\n    if (isDOMError(candidate) || isDOMException(candidate)) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n\n        const domException = candidate as unknown as DOMException\n\n        if (isErrorWithStack(candidate)) {\n            errorProperties = errorPropertiesFromError(candidate as Error)\n        } else {\n            const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException')\n            const message = domException.message ? `${name}: ${domException.message}` : name\n            errorProperties = errorPropertiesFromString(message)\n            errorProperties.$exception_type = isDOMError(domException) ? 'DOMError' : 'DOMException'\n            errorProperties.$exception_message = errorProperties.$exception_message || message\n        }\n        if ('code' in domException) {\n            errorProperties['$exception_DOMException_code'] = `${domException.code}`\n        }\n    } else if (isErrorEvent(candidate as ErrorEvent) && (candidate as ErrorEvent).error) {\n        errorProperties = errorPropertiesFromError((candidate as ErrorEvent).error as Error)\n    } else if (isError(candidate)) {\n        errorProperties = errorPropertiesFromError(candidate)\n    } else if (isPlainObject(candidate) || isEvent(candidate)) {\n        // group these by using the keys available on the object\n        const objectException = candidate as Record<string, unknown>\n        errorProperties = errorPropertiesFromObject(objectException)\n        errorProperties.$exception_is_synthetic = true\n    } else {\n        // If none of previous checks were valid, then it must be a string\n        errorProperties.$exception_type = errorProperties.$exception_type || 'Error'\n        errorProperties.$exception_message = errorProperties.$exception_message || candidate\n        errorProperties.$exception_is_synthetic = true\n    }\n\n    return {\n        ...errorProperties,\n        // now we make sure the mandatory fields that were made optional are present\n        $exception_type: errorProperties.$exception_type || 'UnknownErrorType',\n        $exception_message: errorProperties.$exception_message || '',\n        $exception_level: isSeverityLevel(errorProperties.$exception_level)\n            ? errorProperties.$exception_level\n            : 'error',\n        ...(source\n            ? {\n                  $exception_source: source, // TODO get this from URL if not present\n              }\n            : {}),\n        ...(lineno ? { $exception_lineno: lineno } : {}),\n        ...(colno ? { $exception_colno: colno } : {}),\n    }\n}\n\nexport function unhandledRejectionToProperties([ev]: [ev: PromiseRejectionEvent]): ErrorProperties {\n    // dig the object of the rejection out of known event types\n    let error: unknown = ev\n    try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in ev) {\n            error = ev.reason\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in ev && 'reason' in (ev as any).detail) {\n            error = (ev as any).detail.reason\n        }\n    } catch (_oO) {\n        // no-empty\n    }\n\n    // some properties are not optional but, it's useful to start off without them enforced\n    let errorProperties: Omit<ErrorProperties, '$exception_type' | '$exception_message' | '$exception_level'> & {\n        $exception_type?: string\n        $exception_message?: string\n        $exception_level?: string\n    } = {}\n    if (isPrimitive(error)) {\n        errorProperties = {\n            $exception_message: `Non-Error promise rejection captured with value: ${String(error)}`,\n        }\n    } else {\n        errorProperties = errorToProperties([error as string | Event])\n    }\n    errorProperties.$exception_handled = false\n\n    return {\n        ...errorProperties,\n        // now we make sure the mandatory fields that were made optional are present\n        $exception_type: (errorProperties.$exception_type = 'UnhandledRejection'),\n        $exception_message: (errorProperties.$exception_message =\n            errorProperties.$exception_message || (ev as any).reason || String(error)),\n        $exception_level: isSeverityLevel(errorProperties.$exception_level)\n            ? errorProperties.$exception_level\n            : 'error',\n    }\n}\n"]}