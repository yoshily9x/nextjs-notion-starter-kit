{"version":3,"file":"survey-event-receiver.js","sourceRoot":"","sources":["../../../src/utils/survey-event-receiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { Survey } from '../posthog-surveys-types'\nimport { SURVEYS_ACTIVATED } from '../constants'\n\nimport { CaptureResult } from '../types'\nimport { ActionMatcher } from '../extensions/surveys/action-matcher'\nimport { PostHog } from '../posthog-core'\nimport { isUndefined } from './type-utils'\n\nexport class SurveyEventReceiver {\n    // eventToSurveys is a mapping of event name to all the surveys that are activated by it\n    private readonly eventToSurveys: Map<string, string[]>\n    // actionToSurveys is a mapping of action name to all the surveys that are activated by it\n    private readonly actionToSurveys: Map<string, string[]>\n    // actionMatcher can look at CaptureResult payloads and match an event to its corresponding action.\n    private actionMatcher?: ActionMatcher | null\n    private readonly instance?: PostHog\n    private static SURVEY_SHOWN_EVENT_NAME = 'survey shown'\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this.eventToSurveys = new Map<string, string[]>()\n        this.actionToSurveys = new Map<string, string[]>()\n    }\n\n    register(surveys: Survey[]): void {\n        if (isUndefined(this.instance?._addCaptureHook)) {\n            return\n        }\n\n        this.setupEventBasedSurveys(surveys)\n        this.setupActionBasedSurveys(surveys)\n    }\n\n    private setupActionBasedSurveys(surveys: Survey[]) {\n        const actionBasedSurveys = surveys.filter(\n            (survey: Survey) => survey.conditions?.actions && survey.conditions?.actions?.values?.length > 0\n        )\n\n        if (actionBasedSurveys.length === 0) {\n            return\n        }\n\n        if (this.actionMatcher == null) {\n            this.actionMatcher = new ActionMatcher(this.instance)\n            this.actionMatcher.init()\n            // match any actions to its corresponding survey.\n            const matchActionToSurvey = (actionName: string) => {\n                this.onAction(actionName)\n            }\n\n            this.actionMatcher._addActionHook(matchActionToSurvey)\n        }\n\n        actionBasedSurveys.forEach((survey) => {\n            if (\n                survey.conditions &&\n                survey.conditions?.actions &&\n                survey.conditions?.actions?.values &&\n                survey.conditions?.actions?.values?.length > 0\n            ) {\n                // register the known set of actions with\n                // the action-matcher so it can match\n                // events to actions\n                this.actionMatcher?.register(survey.conditions.actions.values)\n\n                // maintain a mapping of (Action1) => [Survey1, Survey2, Survey3]\n                // where Surveys 1-3 are all activated by Action1\n                survey.conditions?.actions?.values?.forEach((action) => {\n                    if (action && action.name) {\n                        const knownSurveys: string[] | undefined = this.actionToSurveys.get(action.name)\n                        if (knownSurveys) {\n                            knownSurveys.push(survey.id)\n                        }\n                        this.actionToSurveys.set(action.name, knownSurveys || [survey.id])\n                    }\n                })\n            }\n        })\n    }\n\n    private setupEventBasedSurveys(surveys: Survey[]) {\n        const eventBasedSurveys = surveys.filter(\n            (survey: Survey) => survey.conditions?.events && survey.conditions?.events?.values?.length > 0\n        )\n\n        if (eventBasedSurveys.length === 0) {\n            return\n        }\n\n        // match any events to its corresponding survey.\n        const matchEventToSurvey = (eventName: string) => {\n            this.onEvent(eventName)\n        }\n        this.instance?._addCaptureHook(matchEventToSurvey)\n\n        surveys.forEach((survey) => {\n            // maintain a mapping of (Event1) => [Survey1, Survey2, Survey3]\n            // where Surveys 1-3 are all activated by Event1\n            survey.conditions?.events?.values?.forEach((event) => {\n                if (event && event.name) {\n                    const knownSurveys: string[] | undefined = this.eventToSurveys.get(event.name)\n                    if (knownSurveys) {\n                        knownSurveys.push(survey.id)\n                    }\n                    this.eventToSurveys.set(event.name, knownSurveys || [survey.id])\n                }\n            })\n        })\n    }\n\n    onEvent(event: string, eventPayload?: CaptureResult): void {\n        const existingActivatedSurveys: string[] = this.instance?.persistence?.props[SURVEYS_ACTIVATED] || []\n        if (\n            SurveyEventReceiver.SURVEY_SHOWN_EVENT_NAME == event &&\n            eventPayload &&\n            existingActivatedSurveys.length > 0\n        ) {\n            // remove survey that from activatedSurveys here.\n            const surveyId = eventPayload?.properties?.$survey_id\n            if (surveyId) {\n                const index = existingActivatedSurveys.indexOf(surveyId)\n                if (index >= 0) {\n                    existingActivatedSurveys.splice(index, 1)\n                    this._updateActivatedSurveys(existingActivatedSurveys)\n                }\n            }\n        } else {\n            if (this.eventToSurveys.has(event)) {\n                this._updateActivatedSurveys(existingActivatedSurveys.concat(this.eventToSurveys.get(event) || []))\n            }\n        }\n    }\n\n    onAction(actionName: string): void {\n        const existingActivatedSurveys: string[] = this.instance?.persistence?.props[SURVEYS_ACTIVATED] || []\n        if (this.actionToSurveys.has(actionName)) {\n            this._updateActivatedSurveys(existingActivatedSurveys.concat(this.actionToSurveys.get(actionName) || []))\n        }\n    }\n\n    private _updateActivatedSurveys(activatedSurveys: string[]) {\n        // we use a new Set here to remove duplicates.\n        this.instance?.persistence?.register({\n            [SURVEYS_ACTIVATED]: [...new Set(activatedSurveys)],\n        })\n    }\n\n    getSurveys(): string[] {\n        const existingActivatedSurveys = this.instance?.persistence?.props[SURVEYS_ACTIVATED]\n        return existingActivatedSurveys ? existingActivatedSurveys : []\n    }\n\n    getEventToSurveys(): Map<string, string[]> {\n        return this.eventToSurveys\n    }\n\n    _getActionMatcher(): ActionMatcher | null | undefined {\n        return this.actionMatcher\n    }\n}\n"]}