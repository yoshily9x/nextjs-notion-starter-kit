{"version":3,"file":"autocapture.js","sourceRoot":"","sources":["../../src/autocapture.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, extend, includes, registerEvent } from './utils'\nimport {\n    autocaptureCompatibleElements,\n    getClassNames,\n    getDirectAndNestedSpanText,\n    getElementsChainString,\n    getSafeText,\n    isAngularStyleAttr,\n    isDocumentFragment,\n    isElementNode,\n    isSensitiveElement,\n    isTag,\n    isTextNode,\n    makeSafeText,\n    shouldCaptureDomEvent,\n    shouldCaptureElement,\n    shouldCaptureValue,\n    splitClassString,\n} from './autocapture-utils'\nimport RageClick from './extensions/rageclick'\nimport { AutocaptureConfig, DecideResponse, Properties } from './types'\nimport { PostHog } from './posthog-core'\nimport { AUTOCAPTURE_DISABLED_SERVER_SIDE } from './constants'\n\nimport { isBoolean, isFunction, isNull, isObject, isUndefined } from './utils/type-utils'\nimport { logger } from './utils/logger'\nimport { document, window } from './utils/globals'\nimport { convertToURL } from './utils/request-utils'\n\nconst COPY_AUTOCAPTURE_EVENT = '$copy_autocapture'\n\nfunction limitText(length: number, text: string): string {\n    if (text.length > length) {\n        return text.slice(0, length) + '...'\n    }\n    return text\n}\n\nexport class Autocapture {\n    instance: PostHog\n    _initialized: boolean = false\n    _isDisabledServerSide: boolean | null = null\n    _elementSelectors: Set<string> | null\n    rageclicks = new RageClick()\n    _elementsChainAsString = false\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this._elementSelectors = null\n    }\n\n    private get config(): AutocaptureConfig {\n        const config = isObject(this.instance.config.autocapture) ? this.instance.config.autocapture : {}\n        // precompile the regex\n        config.url_allowlist = config.url_allowlist?.map((url) => new RegExp(url))\n        config.url_ignorelist = config.url_ignorelist?.map((url) => new RegExp(url))\n        return config\n    }\n\n    private _addDomEventHandlers(): void {\n        if (!this.isBrowserSupported()) {\n            logger.info('Disabling Automatic Event Collection because this browser is not supported')\n            return\n        }\n\n        if (!window || !document) {\n            return\n        }\n        const handler = (e: Event) => {\n            e = e || window?.event\n            try {\n                this._captureEvent(e)\n            } catch (error) {\n                logger.error('Failed to capture event', error)\n            }\n        }\n\n        const copiedTextHandler = (e: Event) => {\n            e = e || window?.event\n            this._captureEvent(e, COPY_AUTOCAPTURE_EVENT)\n        }\n\n        registerEvent(document, 'submit', handler, false, true)\n        registerEvent(document, 'change', handler, false, true)\n        registerEvent(document, 'click', handler, false, true)\n\n        if (this.config.capture_copied_text) {\n            registerEvent(document, 'copy', copiedTextHandler, false, true)\n            registerEvent(document, 'cut', copiedTextHandler, false, true)\n        }\n    }\n\n    public startIfEnabled() {\n        if (this.isEnabled && !this._initialized) {\n            this._addDomEventHandlers()\n            this._initialized = true\n        }\n    }\n\n    public afterDecideResponse(response: DecideResponse) {\n        if (response.elementsChainAsString) {\n            this._elementsChainAsString = response.elementsChainAsString\n        }\n\n        if (this.instance.persistence) {\n            this.instance.persistence.register({\n                [AUTOCAPTURE_DISABLED_SERVER_SIDE]: !!response['autocapture_opt_out'],\n            })\n        }\n        // store this in-memory in case persistence is disabled\n        this._isDisabledServerSide = !!response['autocapture_opt_out']\n        this.startIfEnabled()\n    }\n\n    public setElementSelectors(selectors: Set<string>): void {\n        this._elementSelectors = selectors\n    }\n\n    public getElementSelectors(element: Element | null): string[] | null {\n        const elementSelectors: string[] = []\n\n        this._elementSelectors?.forEach((selector) => {\n            const matchedElements = document?.querySelectorAll(selector)\n            matchedElements?.forEach((matchedElement: Element) => {\n                if (element === matchedElement) {\n                    elementSelectors.push(selector)\n                }\n            })\n        })\n\n        return elementSelectors\n    }\n\n    public get isEnabled(): boolean {\n        const persistedServerDisabled = this.instance.persistence?.props[AUTOCAPTURE_DISABLED_SERVER_SIDE]\n        const memoryDisabled = this._isDisabledServerSide\n\n        if (\n            isNull(memoryDisabled) &&\n            !isBoolean(persistedServerDisabled) &&\n            !this.instance.config.advanced_disable_decide\n        ) {\n            // We only enable if we know that the server has not disabled it (unless decide is disabled)\n            return false\n        }\n\n        const disabledServer = this._isDisabledServerSide ?? !!persistedServerDisabled\n        const disabledClient = !this.instance.config.autocapture\n        return !disabledClient && !disabledServer\n    }\n\n    private _previousElementSibling(el: Element): Element | null {\n        if (el.previousElementSibling) {\n            return el.previousElementSibling\n        }\n        let _el: Element | null = el\n        do {\n            _el = _el.previousSibling as Element | null // resolves to ChildNode->Node, which is Element's parent class\n        } while (_el && !isElementNode(_el))\n        return _el\n    }\n\n    private _getAugmentPropertiesFromElement(elem: Element): Properties {\n        const shouldCaptureEl = shouldCaptureElement(elem)\n        if (!shouldCaptureEl) {\n            return {}\n        }\n\n        const props: Properties = {}\n\n        each(elem.attributes, function (attr: Attr) {\n            if (attr.name && attr.name.indexOf('data-ph-capture-attribute') === 0) {\n                const propertyKey = attr.name.replace('data-ph-capture-attribute-', '')\n                const propertyValue = attr.value\n                if (propertyKey && propertyValue && shouldCaptureValue(propertyValue)) {\n                    props[propertyKey] = propertyValue\n                }\n            }\n        })\n\n        return props\n    }\n\n    private _getPropertiesFromElement(elem: Element, maskInputs: boolean, maskText: boolean): Properties {\n        const tag_name = elem.tagName.toLowerCase()\n        const props: Properties = {\n            tag_name: tag_name,\n        }\n        if (autocaptureCompatibleElements.indexOf(tag_name) > -1 && !maskText) {\n            if (tag_name.toLowerCase() === 'a' || tag_name.toLowerCase() === 'button') {\n                props['$el_text'] = limitText(1024, getDirectAndNestedSpanText(elem))\n            } else {\n                props['$el_text'] = limitText(1024, getSafeText(elem))\n            }\n        }\n\n        const classes = getClassNames(elem)\n        if (classes.length > 0)\n            props['classes'] = classes.filter(function (c) {\n                return c !== ''\n            })\n\n        // capture the deny list here because this not-a-class class makes it tricky to use this.config in the function below\n        const elementAttributeIgnorelist = this.config?.element_attribute_ignorelist\n        each(elem.attributes, function (attr: Attr) {\n            // Only capture attributes we know are safe\n            if (isSensitiveElement(elem) && ['name', 'id', 'class', 'aria-label'].indexOf(attr.name) === -1) return\n\n            if (elementAttributeIgnorelist?.includes(attr.name)) return\n\n            if (!maskInputs && shouldCaptureValue(attr.value) && !isAngularStyleAttr(attr.name)) {\n                let value = attr.value\n                if (attr.name === 'class') {\n                    // html attributes can _technically_ contain linebreaks,\n                    // but we're very intolerant of them in the class string,\n                    // so we strip them.\n                    value = splitClassString(value).join(' ')\n                }\n                props['attr__' + attr.name] = limitText(1024, value)\n            }\n        })\n\n        let nthChild = 1\n        let nthOfType = 1\n        let currentElem: Element | null = elem\n        while ((currentElem = this._previousElementSibling(currentElem))) {\n            // eslint-disable-line no-cond-assign\n            nthChild++\n            if (currentElem.tagName === elem.tagName) {\n                nthOfType++\n            }\n        }\n        props['nth_child'] = nthChild\n        props['nth_of_type'] = nthOfType\n\n        return props\n    }\n\n    private _getDefaultProperties(eventType: string): Properties {\n        return {\n            $event_type: eventType,\n            $ce_version: 1,\n        }\n    }\n\n    private _getEventTarget(e: Event): Element | null {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Event/target#Compatibility_notes\n        if (isUndefined(e.target)) {\n            return (e.srcElement as Element) || null\n        } else {\n            if ((e.target as HTMLElement)?.shadowRoot) {\n                return (e.composedPath()[0] as Element) || null\n            }\n            return (e.target as Element) || null\n        }\n    }\n\n    private _captureEvent(e: Event, eventName = '$autocapture'): boolean | void {\n        if (!this.isEnabled) {\n            return\n        }\n\n        /*** Don't mess with this code without running IE8 tests on it ***/\n        let target = this._getEventTarget(e)\n        if (isTextNode(target)) {\n            // defeat Safari bug (see: http://www.quirksmode.org/js/events_properties.html)\n            target = (target.parentNode || null) as Element | null\n        }\n\n        if (eventName === '$autocapture' && e.type === 'click' && e instanceof MouseEvent) {\n            if (\n                this.instance.config.rageclick &&\n                this.rageclicks?.isRageClick(e.clientX, e.clientY, new Date().getTime())\n            ) {\n                this._captureEvent(e, '$rageclick')\n            }\n        }\n\n        const isCopyAutocapture = eventName === COPY_AUTOCAPTURE_EVENT\n        if (\n            target &&\n            shouldCaptureDomEvent(\n                target,\n                e,\n                this.config,\n                // mostly this method cares about the target element, but in the case of copy events,\n                // we want some of the work this check does without insisting on the target element's type\n                isCopyAutocapture,\n                // we also don't want to restrict copy checks to clicks,\n                // so we pass that knowledge in here, rather than add the logic inside the check\n                isCopyAutocapture ? ['copy', 'cut'] : undefined\n            )\n        ) {\n            const targetElementList = [target]\n            let curEl = target\n            while (curEl.parentNode && !isTag(curEl, 'body')) {\n                if (isDocumentFragment(curEl.parentNode)) {\n                    targetElementList.push((curEl.parentNode as any).host)\n                    curEl = (curEl.parentNode as any).host\n                    continue\n                }\n                targetElementList.push(curEl.parentNode as Element)\n                curEl = curEl.parentNode as Element\n            }\n\n            const elementsJson: Properties[] = []\n            const autocaptureAugmentProperties: Properties = {}\n            let href,\n                explicitNoCapture = false\n\n            each(targetElementList, (el) => {\n                const shouldCaptureEl = shouldCaptureElement(el)\n\n                // if the element or a parent element is an anchor tag\n                // include the href as a property\n                if (el.tagName.toLowerCase() === 'a') {\n                    href = el.getAttribute('href')\n                    href = shouldCaptureEl && shouldCaptureValue(href) && href\n                }\n\n                // allow users to programmatically prevent capturing of elements by adding class 'ph-no-capture'\n                const classes = getClassNames(el)\n                if (includes(classes, 'ph-no-capture')) {\n                    explicitNoCapture = true\n                }\n\n                elementsJson.push(\n                    this._getPropertiesFromElement(\n                        el,\n                        this.instance.config.mask_all_element_attributes,\n                        this.instance.config.mask_all_text\n                    )\n                )\n\n                const augmentProperties = this._getAugmentPropertiesFromElement(el)\n                extend(autocaptureAugmentProperties, augmentProperties)\n            })\n\n            if (!this.instance.config.mask_all_text) {\n                // if the element is a button or anchor tag get the span text from any\n                // children and include it as/with the text property on the parent element\n                if (target.tagName.toLowerCase() === 'a' || target.tagName.toLowerCase() === 'button') {\n                    elementsJson[0]['$el_text'] = getDirectAndNestedSpanText(target)\n                } else {\n                    elementsJson[0]['$el_text'] = getSafeText(target)\n                }\n            }\n\n            let externalHref: string | undefined\n            if (href) {\n                elementsJson[0]['attr__href'] = href\n                const hrefHost = convertToURL(href)?.host\n                const locationHost = window?.location?.host\n                if (hrefHost && locationHost && hrefHost !== locationHost) {\n                    externalHref = href\n                }\n            }\n\n            if (explicitNoCapture) {\n                return false\n            }\n\n            const props = extend(\n                this._getDefaultProperties(e.type),\n                this._elementsChainAsString\n                    ? {\n                          $elements_chain: getElementsChainString(elementsJson),\n                      }\n                    : {\n                          $elements: elementsJson,\n                      },\n                elementsJson[0]?.['$el_text'] ? { $el_text: elementsJson[0]?.['$el_text'] } : {},\n                externalHref && e.type === 'click' ? { $external_click_url: externalHref } : {},\n                autocaptureAugmentProperties\n            )\n\n            const elementSelectors = this.getElementSelectors(target)\n            if (elementSelectors && elementSelectors.length > 0) {\n                props['$element_selectors'] = elementSelectors\n            }\n\n            if (eventName === COPY_AUTOCAPTURE_EVENT) {\n                // you can't read the data from the clipboard event,\n                // but you can guess that you can read it from the window's current selection\n                const selectedContent = makeSafeText(window?.getSelection()?.toString())\n                const clipType = (e as ClipboardEvent).type || 'clipboard'\n                if (!selectedContent) {\n                    return false\n                }\n                props['$selected_content'] = selectedContent\n                props['$copy_type'] = clipType\n            }\n\n            this.instance.capture(eventName, props)\n            return true\n        }\n    }\n\n    isBrowserSupported(): boolean {\n        return isFunction(document?.querySelectorAll)\n    }\n}\n"]}