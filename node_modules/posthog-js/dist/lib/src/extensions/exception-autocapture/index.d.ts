import { PostHog } from '../../posthog-core';
import { DecideResponse, Properties } from '../../types';
export declare const BASE_ERROR_ENDPOINT = "/e/";
export declare class ExceptionObserver {
    private _endpoint;
    instance: PostHog;
    remoteEnabled: boolean | undefined;
    private originalOnUnhandledRejectionHandler;
    private unwrapOnError;
    private unwrapUnhandledRejection;
    constructor(instance: PostHog);
    get endpoint(): string;
    get isEnabled(): boolean;
    get isCapturing(): boolean;
    get hasHandlers(): ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any) | undefined;
    startIfEnabled(): void;
    private loadScript;
    private startCapturing;
    private stopCapturing;
    afterDecideResponse(response: DecideResponse): void;
    captureException(errorProperties: Properties): void;
    /**
     * :TRICKY: Make sure we batch these requests
     */
    sendExceptionEvent(properties: {
        [key: string]: any;
    }): void;
}
